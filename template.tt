// ----------------------------------------------------------------------------------------------
2	 // Copyright (c) Microsoft.
3	 // ----------------------------------------------------------------------------------------------
4	 // This source code is subject to terms and conditions of the Microsoft Public License. A 
5	 // copy of the license can be found in the License.html file at the root of this distribution. 
6	 // If you cannot locate the  Microsoft Public License, please send an email to 
7	 // dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
8	 //  by the terms of the Microsoft Public License.
9	 // ----------------------------------------------------------------------------------------------
10	 // You must not remove this notice, or any other, from this software.
11	 // ----------------------------------------------------------------------------------------------
12	  
13	 // ----------------------------------------------------------------------------------------------
14	 // Hi there! This is the output of the template "Hello World".
15	 //
16	 //   If you haven't already done so, please open the template file (the .tt file). The C# file is
17	 //   geneated by using the template.
18	 //
19	 //   For more samples and information please visit the Official T4 team blog:
20	 //      http://blogs.msdn.com/b/t4/
21	 //
22	 //   Best regards,
23	 //      The T4 Team
24	 // ----------------------------------------------------------------------------------------------
25	  
26	 <#
27	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
28	     // +++ Documentation
29	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
30	  
31	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
32	     // T4 is very much like ASP or PHP, but instead of generating web-pages T4 is used to 
33	     // generate code, xml or any other text-based solution artifacts.
34	  
35	     // T4 can help you minimize the amount of redundancy in maintaining a project.
36	     // Redundancy is the enemy of maintainability. Most of the times you don't need T4 to 
37	     // combat redundancy, a loop is an excellent way to reduce redundancy. However in certain 
38	     // situations the programming language lacks constructs to make the code non-redundant. 
39	     // This is one area where T4 can step in and help you.
40	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
41	  
42	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
43	     // This sample is the "Hello World" sample; it will show you how to get started with T4. 
44	     // Later samples will address concrete problems.
45	  
46	     // Exercise 1.1: 
47	     //   Create your own T4 template file:
48	     //   1. Type Ctrl-Shift-A (Add New Item)
49	     //   2. Select class template but don't click OK yet
50	     //   3. Change the extension of the class template to .tt, Visual Studio recognizes this
51	     //      template and will create T4 template file
52	     //   4. Click OK
53	  
54	     // Whenever you save a template file, the template is compiled and executed to generate 
55	     // the output. The first time you do this, you might get a security warning asking if 
56	     // you wish to proceed. The reason is that a T4 template is basically a C# program and can
57	     // contain trojan code. Therefore, please be careful when downloading code samples from the Internet!
58	  
59	     // A T4 template file contains two parts: template code and text that is emitted into the 
60	     // output file. When you create a new template, it contains no template code and is therefore
61	     // just emitted into the output file.
62	  
63	     // The reason this comment doesn't show up in the output file is because it's written inside 
64	     // template code tags: \<# and \#> (ignore backslashes)
65	  
66	     // We can type any C# code inside these tags, this will be executed when you save the file.
67	     // Let's write some text to the output file.
68	  
69	     WriteLine ("// This is emitted into the ouput file");
70	  
71	     // If you look in the output file you can find the above text 
72	  
73	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
74	 #>
75	  
76	 <#
77	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
78	     // There are also tags controlling the code-generator.
79	     // Let's instruct the code-generator to use C# for template code and
80	     // let's make sure the output extension is .cs
81	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
82	 #>
83	 <#@ template    language="C#"   #>
84	 <#@ output      extension=".cs" #>
85	  
86	 <#
87	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
88	     // A good pattern to use when writing T4 templates is seperating the domain model
89	     // and the template. It sounds fancy but it's basically the same as the 
90	     // separation between a XML document and the XSLT.
91	  
92	     // We have tried to consistently start samples with the model where we 
93	     // specify "what" we want to have generated. The model is declarative.
94	  
95	     // The template then is the implementation on "how" it's generated. 
96	  
97	     // In certain cases it makes sense to load the model from outside, for instance
98	     // the database schema.
99	  
100	     // In our experience this improves maintainbility of the templates.
101	  
102	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
103	     // +++ Model
104	     // 
105	     // Excercise 1.2: 
106	     //   Try to add another string to the model and see how the output is affected
107	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
108	     var words = new [] {"Hello", "World"};  
109	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
110	 #>
111	 namespace Samples
112	 {
113	     class HelloWorld
114	     {
115	 <#
116	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
117	     // +++ Template
118	     //
119	     // Here we iterate over the model
120	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
121	     foreach (var word in words)
122	     {
123	         // The lines inside the loop will be repeated
124	 #>
125	         /// <summary>
126	         /// The <#=word#> property
127	         /// </summary>
128	 <#
129	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
130	     // \<#=word\#> is equivalent to:
131	     // \<#Write (word.ToString ());\#>
132	     
133	     // Excercise 1.3: 
134	     //   Try to change the property declaration so that it instead
135	     //   writes to a backing field and fires an event when the propery is changed
136	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                         
137	 #>
138	         public string <#=word#> { get;set; }
139	  
140	 <#
141	     }
142	     // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
143	 #>
144	     }
145	 }
